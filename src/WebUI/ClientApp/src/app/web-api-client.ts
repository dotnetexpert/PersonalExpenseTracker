/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IEmailClient {
    sendMail(email: string | null | undefined, subject: string | null | undefined, message: string | null | undefined): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class EmailClient implements IEmailClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    sendMail(email: string | null | undefined, subject: string | null | undefined, message: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/email?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (subject !== undefined && subject !== null)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
        if (message !== undefined && message !== null)
            url_ += "message=" + encodeURIComponent("" + message) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendMail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendMail(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSendMail(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface IExpenseCategoryClient {
    getAll(applicationUserId: string | null | undefined, transId: number | undefined): Observable<ExpenseCategoryArray>;
    upsert(category: ExpenseCategory): Observable<Unit>;
    delete(id: number | undefined): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class ExpenseCategoryClient implements IExpenseCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(applicationUserId: string | null | undefined, transId: number | undefined): Observable<ExpenseCategoryArray> {
        let url_ = this.baseUrl + "/api/ExpenseCategory/getAll?";
        if (applicationUserId !== undefined && applicationUserId !== null)
            url_ += "ApplicationUserId=" + encodeURIComponent("" + applicationUserId) + "&";
        if (transId === null)
            throw new Error("The parameter 'transId' cannot be null.");
        else if (transId !== undefined)
            url_ += "transId=" + encodeURIComponent("" + transId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ExpenseCategoryArray>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExpenseCategoryArray>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ExpenseCategoryArray> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExpenseCategoryArray.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExpenseCategoryArray>(<any>null);
    }

    upsert(category: ExpenseCategory): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ExpenseCategory/upsertCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }

    delete(id: number | undefined): Observable<Unit> {
        let url_ = this.baseUrl + "/api/ExpenseCategory/deleteCategory?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }
}

export interface IPayeeListClient {
    getAll(applicationUserId: string | null | undefined, transId: number | undefined): Observable<PayeeListArray>;
    upsert(payee: PayeeList): Observable<Unit>;
    delete(id: number | undefined): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class PayeeListClient implements IPayeeListClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(applicationUserId: string | null | undefined, transId: number | undefined): Observable<PayeeListArray> {
        let url_ = this.baseUrl + "/api/PayeeList/getAllPayee?";
        if (applicationUserId !== undefined && applicationUserId !== null)
            url_ += "ApplicationUserId=" + encodeURIComponent("" + applicationUserId) + "&";
        if (transId === null)
            throw new Error("The parameter 'transId' cannot be null.");
        else if (transId !== undefined)
            url_ += "transId=" + encodeURIComponent("" + transId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PayeeListArray>><any>_observableThrow(e);
                }
            } else
                return <Observable<PayeeListArray>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PayeeListArray> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PayeeListArray.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PayeeListArray>(<any>null);
    }

    upsert(payee: PayeeList): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PayeeList/upsertPayee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payee);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }

    delete(id: number | undefined): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PayeeList/deletePayee?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }
}

export interface IPaymentMethodClient {
    getAll(applicationUserId: string | null | undefined): Observable<PaymentMethodArray>;
    upsert(paymentMethod: PaymentMethod): Observable<Unit>;
    delete(id: number | undefined): Observable<Unit>;
}

@Injectable({
    providedIn: 'root'
})
export class PaymentMethodClient implements IPaymentMethodClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(applicationUserId: string | null | undefined): Observable<PaymentMethodArray> {
        let url_ = this.baseUrl + "/api/PaymentMethod/getAllMethods?";
        if (applicationUserId !== undefined && applicationUserId !== null)
            url_ += "ApplicationUserId=" + encodeURIComponent("" + applicationUserId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PaymentMethodArray>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaymentMethodArray>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaymentMethodArray> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentMethodArray.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaymentMethodArray>(<any>null);
    }

    upsert(paymentMethod: PaymentMethod): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PaymentMethod/upsertMethod";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(paymentMethod);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }

    delete(id: number | undefined): Observable<Unit> {
        let url_ = this.baseUrl + "/api/PaymentMethod/deleteMethod?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Unit>><any>_observableThrow(e);
                }
            } else
                return <Observable<Unit>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Unit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Unit>(<any>null);
    }
}

export interface ITransactionClient {
    getAll(userId: string | null | undefined): Observable<GetAllTransactionsByTransactionIdVM>;
    upsert(transaction: Transaction): Observable<FileResponse>;
    delete(id: number | undefined): Observable<number>;
    getTodayTransactions(userId: string | null | undefined, startDate: Date | undefined, endDate: Date | undefined): Observable<TransactionSummaryVM>;
    getLast7DaysTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM>;
    getThisMonthTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM>;
    getThisYearTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM>;
}

@Injectable({
    providedIn: 'root'
})
export class TransactionClient implements ITransactionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(userId: string | null | undefined): Observable<GetAllTransactionsByTransactionIdVM> {
        let url_ = this.baseUrl + "/api/Transaction/getAllTransactions?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<GetAllTransactionsByTransactionIdVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetAllTransactionsByTransactionIdVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<GetAllTransactionsByTransactionIdVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAllTransactionsByTransactionIdVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAllTransactionsByTransactionIdVM>(<any>null);
    }

    upsert(transaction: Transaction): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Transaction/upsertTransaction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transaction);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpsert(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    delete(id: number | undefined): Observable<number> {
        let url_ = this.baseUrl + "/api/Transaction/deleteTransaction?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }

    getTodayTransactions(userId: string | null | undefined, startDate: Date | undefined, endDate: Date | undefined): Observable<TransactionSummaryVM> {
        let url_ = this.baseUrl + "/api/Transaction/getTodayTransactions?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTodayTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTodayTransactions(<any>response_);
                } catch (e) {
                    return <Observable<TransactionSummaryVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransactionSummaryVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetTodayTransactions(response: HttpResponseBase): Observable<TransactionSummaryVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionSummaryVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionSummaryVM>(<any>null);
    }

    getLast7DaysTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM> {
        let url_ = this.baseUrl + "/api/Transaction/getLast7DaysTransactions?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLast7DaysTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLast7DaysTransactions(<any>response_);
                } catch (e) {
                    return <Observable<TransactionSummaryVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransactionSummaryVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetLast7DaysTransactions(response: HttpResponseBase): Observable<TransactionSummaryVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionSummaryVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionSummaryVM>(<any>null);
    }

    getThisMonthTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM> {
        let url_ = this.baseUrl + "/api/Transaction/getThisMonthTransactions?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetThisMonthTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetThisMonthTransactions(<any>response_);
                } catch (e) {
                    return <Observable<TransactionSummaryVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransactionSummaryVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetThisMonthTransactions(response: HttpResponseBase): Observable<TransactionSummaryVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionSummaryVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionSummaryVM>(<any>null);
    }

    getThisYearTransactions(userId: string | null | undefined): Observable<TransactionSummaryVM> {
        let url_ = this.baseUrl + "/api/Transaction/getThisYearTransactions?";
        if (userId !== undefined && userId !== null)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetThisYearTransactions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetThisYearTransactions(<any>response_);
                } catch (e) {
                    return <Observable<TransactionSummaryVM>><any>_observableThrow(e);
                }
            } else
                return <Observable<TransactionSummaryVM>><any>_observableThrow(response_);
        }));
    }

    protected processGetThisYearTransactions(response: HttpResponseBase): Observable<TransactionSummaryVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionSummaryVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionSummaryVM>(<any>null);
    }
}

export interface IUserClient {
    login(loginViewModel: LoginViewModel): Observable<ApplicationUser>;
    register(name: string | null | undefined, email: string | null | undefined, phoneNumber: string | null | undefined, password: string | null | undefined): Observable<ApplicationUser>;
}

@Injectable({
    providedIn: 'root'
})
export class UserClient implements IUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(loginViewModel: LoginViewModel): Observable<ApplicationUser> {
        let url_ = this.baseUrl + "/api/auth/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginViewModel);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationUser>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApplicationUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationUser>(<any>null);
    }

    register(name: string | null | undefined, email: string | null | undefined, phoneNumber: string | null | undefined, password: string | null | undefined): Observable<ApplicationUser> {
        let url_ = this.baseUrl + "/api/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (email !== null && email !== undefined)
            content_.append("Email", email.toString());
        if (phoneNumber !== null && phoneNumber !== undefined)
            content_.append("PhoneNumber", phoneNumber.toString());
        if (password !== null && password !== undefined)
            content_.append("Password", password.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationUser>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<ApplicationUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApplicationUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationUser>(<any>null);
    }
}

export class ExpenseCategoryArray implements IExpenseCategoryArray {
    expenseCategories?: ExpenseCategory[] | undefined;

    constructor(data?: IExpenseCategoryArray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["expenseCategories"])) {
                this.expenseCategories = [] as any;
                for (let item of _data["expenseCategories"])
                    this.expenseCategories!.push(ExpenseCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExpenseCategoryArray {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseCategoryArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.expenseCategories)) {
            data["expenseCategories"] = [];
            for (let item of this.expenseCategories)
                data["expenseCategories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IExpenseCategoryArray {
    expenseCategories?: ExpenseCategory[] | undefined;
}

export class DomainObjects implements IDomainObjects {
    id?: number;
    name!: string;
    isDefault?: boolean;
    isDeleted?: boolean;
    applicationUserId?: string | undefined;

    constructor(data?: IDomainObjects) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isDefault = _data["isDefault"];
            this.isDeleted = _data["isDeleted"];
            this.applicationUserId = _data["applicationUserId"];
        }
    }

    static fromJS(data: any): DomainObjects {
        data = typeof data === 'object' ? data : {};
        let result = new DomainObjects();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isDefault"] = this.isDefault;
        data["isDeleted"] = this.isDeleted;
        data["applicationUserId"] = this.applicationUserId;
        return data; 
    }
}

export interface IDomainObjects {
    id?: number;
    name: string;
    isDefault?: boolean;
    isDeleted?: boolean;
    applicationUserId?: string | undefined;
}

export class ExpenseCategory extends DomainObjects implements IExpenseCategory {
    transactionTypeId?: TransactionType;

    constructor(data?: IExpenseCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.transactionTypeId = _data["transactionTypeId"];
        }
    }

    static fromJS(data: any): ExpenseCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionTypeId"] = this.transactionTypeId;
        super.toJSON(data);
        return data; 
    }
}

export interface IExpenseCategory extends IDomainObjects {
    transactionTypeId?: TransactionType;
}

export enum TransactionType {
    Debit = 0,
    Credit = 1,
}

export class Unit implements IUnit {

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUnit {
}

export class PayeeListArray implements IPayeeListArray {
    payeeLists?: PayeeList[] | undefined;

    constructor(data?: IPayeeListArray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["payeeLists"])) {
                this.payeeLists = [] as any;
                for (let item of _data["payeeLists"])
                    this.payeeLists!.push(PayeeList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PayeeListArray {
        data = typeof data === 'object' ? data : {};
        let result = new PayeeListArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.payeeLists)) {
            data["payeeLists"] = [];
            for (let item of this.payeeLists)
                data["payeeLists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPayeeListArray {
    payeeLists?: PayeeList[] | undefined;
}

export class PayeeList extends DomainObjects implements IPayeeList {
    transactionTypeId?: TransactionType;

    constructor(data?: IPayeeList) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.transactionTypeId = _data["transactionTypeId"];
        }
    }

    static fromJS(data: any): PayeeList {
        data = typeof data === 'object' ? data : {};
        let result = new PayeeList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionTypeId"] = this.transactionTypeId;
        super.toJSON(data);
        return data; 
    }
}

export interface IPayeeList extends IDomainObjects {
    transactionTypeId?: TransactionType;
}

export class PaymentMethodArray implements IPaymentMethodArray {
    paymentMethods?: PaymentMethod[] | undefined;

    constructor(data?: IPaymentMethodArray) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["paymentMethods"])) {
                this.paymentMethods = [] as any;
                for (let item of _data["paymentMethods"])
                    this.paymentMethods!.push(PaymentMethod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentMethodArray {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodArray();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.paymentMethods)) {
            data["paymentMethods"] = [];
            for (let item of this.paymentMethods)
                data["paymentMethods"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaymentMethodArray {
    paymentMethods?: PaymentMethod[] | undefined;
}

export class PaymentMethod extends DomainObjects implements IPaymentMethod {

    constructor(data?: IPaymentMethod) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): PaymentMethod {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IPaymentMethod extends IDomainObjects {
}

export class GetAllTransactionsByTransactionIdVM implements IGetAllTransactionsByTransactionIdVM {
    today?: TransactionSummaryVM | undefined;
    last7Days?: TransactionSummaryVM | undefined;
    thisMonth?: TransactionSummaryVM | undefined;
    thisYear?: TransactionSummaryVM | undefined;

    constructor(data?: IGetAllTransactionsByTransactionIdVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.today = _data["today"] ? TransactionSummaryVM.fromJS(_data["today"]) : <any>undefined;
            this.last7Days = _data["last7Days"] ? TransactionSummaryVM.fromJS(_data["last7Days"]) : <any>undefined;
            this.thisMonth = _data["thisMonth"] ? TransactionSummaryVM.fromJS(_data["thisMonth"]) : <any>undefined;
            this.thisYear = _data["thisYear"] ? TransactionSummaryVM.fromJS(_data["thisYear"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetAllTransactionsByTransactionIdVM {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllTransactionsByTransactionIdVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["today"] = this.today ? this.today.toJSON() : <any>undefined;
        data["last7Days"] = this.last7Days ? this.last7Days.toJSON() : <any>undefined;
        data["thisMonth"] = this.thisMonth ? this.thisMonth.toJSON() : <any>undefined;
        data["thisYear"] = this.thisYear ? this.thisYear.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetAllTransactionsByTransactionIdVM {
    today?: TransactionSummaryVM | undefined;
    last7Days?: TransactionSummaryVM | undefined;
    thisMonth?: TransactionSummaryVM | undefined;
    thisYear?: TransactionSummaryVM | undefined;
}

export class TransactionSummaryVM implements ITransactionSummaryVM {
    totalIncome?: number;
    totalExpense?: number;
    outstandingBalance?: number;
    transactions?: TransactionDetailVM[] | undefined;

    constructor(data?: ITransactionSummaryVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalIncome = _data["totalIncome"];
            this.totalExpense = _data["totalExpense"];
            this.outstandingBalance = _data["outstandingBalance"];
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(TransactionDetailVM.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransactionSummaryVM {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionSummaryVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalIncome"] = this.totalIncome;
        data["totalExpense"] = this.totalExpense;
        data["outstandingBalance"] = this.outstandingBalance;
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITransactionSummaryVM {
    totalIncome?: number;
    totalExpense?: number;
    outstandingBalance?: number;
    transactions?: TransactionDetailVM[] | undefined;
}

export class TransactionDetailVM implements ITransactionDetailVM {
    transactionId?: number;
    expenseAmount?: number;
    transactionDate?: Date;
    description?: string | undefined;
    transactionType?: string | undefined;
    expenseCategory?: ExpenseCategoryVM | undefined;
    payee?: PayeeVM | undefined;
    paymentMethod?: PaymentMethodVM | undefined;

    constructor(data?: ITransactionDetailVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionId = _data["transactionId"];
            this.expenseAmount = _data["expenseAmount"];
            this.transactionDate = _data["transactionDate"] ? new Date(_data["transactionDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.transactionType = _data["transactionType"];
            this.expenseCategory = _data["expenseCategory"] ? ExpenseCategoryVM.fromJS(_data["expenseCategory"]) : <any>undefined;
            this.payee = _data["payee"] ? PayeeVM.fromJS(_data["payee"]) : <any>undefined;
            this.paymentMethod = _data["paymentMethod"] ? PaymentMethodVM.fromJS(_data["paymentMethod"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransactionDetailVM {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDetailVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId;
        data["expenseAmount"] = this.expenseAmount;
        data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["transactionType"] = this.transactionType;
        data["expenseCategory"] = this.expenseCategory ? this.expenseCategory.toJSON() : <any>undefined;
        data["payee"] = this.payee ? this.payee.toJSON() : <any>undefined;
        data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITransactionDetailVM {
    transactionId?: number;
    expenseAmount?: number;
    transactionDate?: Date;
    description?: string | undefined;
    transactionType?: string | undefined;
    expenseCategory?: ExpenseCategoryVM | undefined;
    payee?: PayeeVM | undefined;
    paymentMethod?: PaymentMethodVM | undefined;
}

export class ExpenseCategoryVM implements IExpenseCategoryVM {
    categoryId?: number;
    name?: string | undefined;

    constructor(data?: IExpenseCategoryVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExpenseCategoryVM {
        data = typeof data === 'object' ? data : {};
        let result = new ExpenseCategoryVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IExpenseCategoryVM {
    categoryId?: number;
    name?: string | undefined;
}

export class PayeeVM implements IPayeeVM {
    payeeId?: number;
    name?: string | undefined;

    constructor(data?: IPayeeVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.payeeId = _data["payeeId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PayeeVM {
        data = typeof data === 'object' ? data : {};
        let result = new PayeeVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payeeId"] = this.payeeId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPayeeVM {
    payeeId?: number;
    name?: string | undefined;
}

export class PaymentMethodVM implements IPaymentMethodVM {
    paymentMethodId?: number;
    name?: string | undefined;

    constructor(data?: IPaymentMethodVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentMethodId = _data["paymentMethodId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PaymentMethodVM {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMethodId"] = this.paymentMethodId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPaymentMethodVM {
    paymentMethodId?: number;
    name?: string | undefined;
}

export class Transaction implements ITransaction {
    transactionId?: number;
    transactionTypeId?: TransactionType;
    expenseAmount?: number;
    applicationUserId?: string | undefined;
    applicationUser?: ApplicationUser | undefined;
    categoryId?: number;
    expenseCategory?: ExpenseCategory | undefined;
    paymentMethodId?: number;
    paymentMethod?: PaymentMethod | undefined;
    payeeId?: number;
    payeeList?: PayeeList | undefined;
    description?: string | undefined;
    transactionDate?: Date;

    constructor(data?: ITransaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionId = _data["transactionId"];
            this.transactionTypeId = _data["transactionTypeId"];
            this.expenseAmount = _data["expenseAmount"];
            this.applicationUserId = _data["applicationUserId"];
            this.applicationUser = _data["applicationUser"] ? ApplicationUser.fromJS(_data["applicationUser"]) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.expenseCategory = _data["expenseCategory"] ? ExpenseCategory.fromJS(_data["expenseCategory"]) : <any>undefined;
            this.paymentMethodId = _data["paymentMethodId"];
            this.paymentMethod = _data["paymentMethod"] ? PaymentMethod.fromJS(_data["paymentMethod"]) : <any>undefined;
            this.payeeId = _data["payeeId"];
            this.payeeList = _data["payeeList"] ? PayeeList.fromJS(_data["payeeList"]) : <any>undefined;
            this.description = _data["description"];
            this.transactionDate = _data["transactionDate"] ? new Date(_data["transactionDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Transaction {
        data = typeof data === 'object' ? data : {};
        let result = new Transaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId;
        data["transactionTypeId"] = this.transactionTypeId;
        data["expenseAmount"] = this.expenseAmount;
        data["applicationUserId"] = this.applicationUserId;
        data["applicationUser"] = this.applicationUser ? this.applicationUser.toJSON() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["expenseCategory"] = this.expenseCategory ? this.expenseCategory.toJSON() : <any>undefined;
        data["paymentMethodId"] = this.paymentMethodId;
        data["paymentMethod"] = this.paymentMethod ? this.paymentMethod.toJSON() : <any>undefined;
        data["payeeId"] = this.payeeId;
        data["payeeList"] = this.payeeList ? this.payeeList.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["transactionDate"] = this.transactionDate ? this.transactionDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITransaction {
    transactionId?: number;
    transactionTypeId?: TransactionType;
    expenseAmount?: number;
    applicationUserId?: string | undefined;
    applicationUser?: ApplicationUser | undefined;
    categoryId?: number;
    expenseCategory?: ExpenseCategory | undefined;
    paymentMethodId?: number;
    paymentMethod?: PaymentMethod | undefined;
    payeeId?: number;
    payeeList?: PayeeList | undefined;
    description?: string | undefined;
    transactionDate?: Date;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    name!: string;
    role?: string | undefined;
    token?: string | undefined;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.role = _data["role"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["role"] = this.role;
        data["token"] = this.token;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationUser extends IIdentityUser {
    name: string;
    role?: string | undefined;
    token?: string | undefined;
}

export class LoginViewModel implements ILoginViewModel {
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginViewModel {
    userName?: string | undefined;
    password?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}